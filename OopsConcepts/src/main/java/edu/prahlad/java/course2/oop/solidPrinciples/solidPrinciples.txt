SOLID Principles
is a mnemonic for five design principles intended to make software designs
more understandable, flexible and maintainable
1) Single Responsibility Principle
   a) A class should have just one reason to change.
   b) Try to make every class responsible for a single part of the
       functionality provided by the software, and make that responsibility
       entirely encapsulated by the class.
2) Open/Closed Principle
   a) Classes should be open for extension but closed for modification.
   b) If a class is already developed, tested, reviewed, and included in
        some framework or otherwise used in an app, trying to mess with its code is risky.
        Instead if chaining the code of the original class that you want to behave differently.
   c) If you know that there's a bug in the class, just go on and fix it;
        child class shouldn't be responsible for the parent's issues.

3) Liskov Substitution Principle
   When extending a class, remember that you should be able to,
   pass objects of the subclass in place of objects of the parent class
   without breaking the client code.
   a) Liskov is a set of checks that help predict whether a subclass remains compatible
        with the code that was able to work with objects of the superclass.
   b) This concept is critical when developing libraries & frameworks because
        your classes are going to be used by other people whose code
        you can't directly access and change.
   c) Rules
        i) Parameter types in a method of a subclass should match or be more abstract
            than parameter types in the method of the super class
       ii) The return type in a method of a subclass should match or be a subtype
            of the return type in the method of the superclass.
      iii) A method in a subclass shouldn't throw types of exceptions which
            the base method isn't expected to throw.
       iv) A subclass shouldn't strengthen pre-conditions.
        v) A subclass shouldn't weaken post-conditions.
       vi) Invariants if a superclass must be preserved.
      vii) A subclass shouldn't change values of private fields of the superclass. ( not in Java, in some programming lang it's possible ..)

4) Interface Segregation Principle
   a) Clients shouldn't be forced to depend on methods they do not use.
   b) you should break down "fat" interfaces into more granular & specific ones.
   c) Remember the more interfaces you create, the more complex your code becomes, keep the balance.

5) Dependency Inversion Principle
   High-level classes shouldn't depend on low-level classes.
   Both should depend on abstractions. Abstractions shouldn't depend on details.
   Details should depend on abstractions.